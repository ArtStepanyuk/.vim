global !p
import uuid
import re
import textwrap

mod_re = re.compile('angular.module\(["\']*(.*?)["\'\),]')
type_re = re.compile('\.(controller|directive|service|factory|provider|value)\(')
component_re = re.compile('\.(?:controller|directive|service|factory|provider)\(["\'](.*?)["\']')
DEFAULT_NAME = 'appName'
DEFAULT_TYPE_NAME = 'type'
DEFAULT_COMPONENT_NAME = 'componentName'

def bufText():
	return '\n'.join(vim.current.window.buffer[:vim.current.window.cursor[0]+1])

def get_ng_component_of():
    text = bufText()
    return "%s.%s:%s" % (get_ng_module(text),
                         get_ng_type(text),
                         get_ng_component(text))

def get_ng_type(text=bufText()):
    res = type_re.findall(text)
    if len(res) > 0:
        return res[len(res)-1]
    else:
        return DEFAULT_TYPE_NAME

def get_ng_component(text=bufText()):
    res = component_re.findall(text)
    if len(res) > 0:
        return res[len(res)-1]
    else:
        return DEFAULT_COMPONENT_NAME

def get_ng_module(text=bufText()):
    explicit_name = vim.vars.get('ngdoc_module_name', None)
    if explicit_name:
        return explicit_name.decode('utf-8')

    res = mod_re.findall(text)
    if len(res) > 0:
        return res[len(res)-1]
    else:
        return DEFAULT_NAME

def injector_phrase(v):
    return '%s = $injector.get(\'%s\')' % (v, v)

def trim_list(p):
    while p[-1] in (',', ';'): p = p[:-1]
    return '\n'.join(v for v in p.split('\n')
                     if len(v.strip()) > 0
                     and v.strip() not in (',', ';')
                     and v[:2] != '//')


def set_injectors(var_list, pre=''):
    var_list = trim_list(var_list)
    if len(var_list) == 0: return ''

    phrase = textwrap.dedent(
        '''
        beforeEach(inject(function($injector) {
          %s
        }));
        ''')

    injectors = ';\n\t'.join(injector_phrase(v) for v in var_list.split(', '))

    phrase = phrase % (injectors,)

    if len(pre) > 0:
        return ('\n' + pre).join(phrase.split('\n'))

    return phrase
endglobal

snippet ngc "Define a new Angular Controller. You can change the controller name and parameters."
var ${1:controllerName} = function(${2:\$scope}, ${3:injectables}) {
  $0
};
endsnippet

snippet ngfor "angular.foreach loop"
angular.forEach(${1:iterateOver}, function(value, key) {
  $0
});
endsnippet


snippet ngm "A new angular module without a config function."
angular.module('${1:moduleName}', [${2:moduleDependencies}]);
$0
endsnippet


snippet ngma "A new angular module without a config function and a variable assignment."
var ${1:moduleName} = angular.module('$1$', [${2:moduleDeps}]);
$0
endsnippet


snippet ngmc "A new angular module with a config function"
var ${1:moduleName} = angular.module('$1', [${2:moduleDeps}], function(${3:configDeps}) {
  $0
});
endsnippet


snippet ngmfa "A factory in a module"
factory('${1:factoryName}', function(${2:dependencies}) {
  $0
});
endsnippet


snippet ngms "Define an Angular Module Service to be attached to a previously defined module. You can change the service name and service injectables."
service('${1:serviceName}', function(${2:injectables}) {
  $0
});
endsnippet


snippet ngmfi "Define an Angular Module Filter to be attached to a previously defined module. You can change the filter name."
filter('${1:filterName}', function(${2:injectables}) {
  return function(input, ${3:args}) {
    $0
  };
})
endsnippet



# Route Based Snippets
snippet ngrw "Defines a when condition of an AngularJS route."
$routeProvider.when('${1:url}', {
  templateUrl: '${2:templateUrl}',
  controller: '${3:controller}'
});
$0
endsnippet



snippet ngrwr "Defines a when condition of an AngularJS route with the resolve block."
$routeProvider.when('${1:url}', {
  templateUrl: '${2:templateUrl}',
  controller: '${3:controller}',
  resolve: {
    $4
  }
});
$0
endsnippet


snippet ngro "Defines an otherwise condition of an AngularJS route."
$routeProvider.otherwise({
  redirectTo: '${1:url}'
});
$0
endsnippet


# Scope Related Snippets
snippet $f "Define a new $scope'd function (usually inside an AngularJS Controller). You can change the function name and arguments."
$scope.${1:functionName} = function(${2:args}) {
  $0
};
endsnippet


snippet $v "Defines a new $scope'd variable inside an AngularJS controller."
$scope.${1:variable} = ${2:value};
$0
endsnippet


snippet $va "Defines a new $scope'd variable inside an AngularJS controller and assigns a value from a constructor arguments."
$scope.${1:variable} = ${2:variable};
$0
endsnippet


snippet $w "Define a $watch for an expression. You can change the expression to be watched."
$scope.$watch('${1:watchExpr}',function(newValue, oldValue) {
  $0
});
endsnippet


snippet $on "Define a $on for a $broadcast/$emit on the $scope inside an Angular Controller. You can change the event name to listen on."
$scope.$on('${1:eventName}', function(event, ${2:args}) {
  $0
});
endsnippet


snippet $b "Define a $broadcast for a $scope inside an Angular Controller / Angular Controller Function. You can change the event name and optional event arguments."
$scope.$broadcast('${1:eventName}', ${2:eventArgs});
$0
endsnippet


snippet $e "Define an $emit for a $scope inside an Angular Controller / Angular Controller Function. You can change the event name and optional event arguments."
$scope.$emit('${1:eventName}', ${2:eventArgs});
$0
endsnippet


# Directive related snippets
snippet ngdcf "A compile function"
function compile(tElement, tAttrs, transclude) {
  return function (scope, element, attrs) {
    $0
  }
}
endsnippet


snippet ngdlf "A linking function in a directive."
function (scope, element, attrs${1:ctrl}) {
  $0
}
endsnippet


snippet ngdc "A directive with a compile function"
directive('${1:directiveName}', function factory(${2:injectables}) {
  var directiveDefinitionObject = {
    ${3:directiveAttrs},
    compile: function compile(tElement, tAttrs, transclude) {
      return function (scope, element, attrs) {
        $0
      }
    }
  };
  return directiveDefinitionObject;
});
endsnippet


snippet ngdl "A directive with a linking function only."
.directive('${1:directiveName}', function(${2:directiveDeps}) {
  return function(scope, element, attrs${3:ctrl}) {
    $0
  }
});
endsnippet

snippet hget "$http.get" !b
$http.get('${1:/uri}'${3:, ${2:query}})
	.success(function(${4:collection}) {
		${5:$scope.$4 = $4;}
	})
	.error(function(err) {
		${6:console.log(err);}
	})
endsnippet

snippet $iget "Injector Get" !b
${1:variable} = $injector.get('${2:$1}');
endsnippet

snippet /s "NGDoc service" !b
/**
 * @ngdoc service
 * @name ${1:`!p snip.rv += get_ng_module()`}.service:${2:`!p snip.rv += get_ng_component()`}
 * @description \`$2\` is a service ${0:to do $2}
 */
endsnippet

snippet /c "NGDoc controller" !b
/**
 * @ngdoc controller
 * @name ${1:`!p snip.rv += get_ng_module()`}.controller:${2:`!p snip.rv += get_ng_component()`}
 * @description \`$2\` is a controller ${0:to do $2}
 */
endsnippet

snippet /m "NGDoc Method" !b
/**
 * @ngdoc
 * @methodOf ${1:`!p snip.rv += get_ng_component_of()`}
 * @name $1#${2:name}
 * @description ${0:\`$2\` is a method to}
 */
endsnippet

snippet /p "NGDoc Property" !b
/**
 * @ngdoc
 * @propertyOf ${1:`!p snip.rv += get_ng_component_of()`}
 * @name $1#${2:name}
 * @description ${0:\`$2\` is a property for}
 */
endsnippet

snippet /d "NGDoc directive" !b
/**
 * @ngdoc directive
 * @name ${1:`!p snip.rv += get_ng_module()`.directive:`!p snip.rv += get_ng_component()`}
 * @param {${2: Type}} ${3: name} ${4: description}
 * @description ${0:Description}
 * @restrict ECA
 */
endsnippet

snippet */ex "Example comment"
* @example
* <example>
*   <file name="${1:index.html}">
* 	</file>
* </example>
endsnippet

snippet r$q "return $q(function ..." !b
return \$q(function(resolve, reject) {
	${1://asynchronously resolve()}
});$0
endsnippet

# TESTING snippets

snippet inj "angular inject() function" !b
inject(function(${1:thingsToInject}) {
	${0://Do something with $1}
});
endsnippet

snippet $ig "$injector.get" !b
${1:something} = \$injector.get('${2:$1}');
endsnippet

snippet mod "" !b
beforeEach(module(function(${1:\$provide}) {
	${0:\$provide.service('TestThing', function(/*injected*/) {
		this.foo = 'bar';
	\});}
}));
endsnippet

snippet injg "Set a local variable via injection" !b
var ${1:injectable}; inject(function(_$1_) { $1 = _$1_; });
endsnippet

snippet test "karma angular test scaffold" !b
describe('${1:something to be tested}', function() {
	//Setup
	beforeEach(module('${2:someModule}'));

	var ${3://Injectables}`!p snip += set_injectors(t[3], '\t')`

	//Tests
	$0
});
endsnippet

# vim:ft=snippets:
